 [  1] CBC_PUSH_IDENT ident-'next_statement'-id:0
 [  0] CBC_POP
 [  1] CBC_PUSH_IDENT ident-'a'-id:1
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  1] CBC_PUSH_IDENT ident-'b'-id:2
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  1] CBC_PUSH_IDENT ident-'c'-id:3
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_CALL_IDENT ident-'d'-id:4 byte_arg:0
 [  1] CBC_PUSH_IDENT ident-'next_statement'-id:0
 [  0] CBC_POP
 [  1] CBC_PUSH_IDENT ident-'a'-id:1
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_JUMP_FORWARD
 [  1] CBC_PUSH_IDENT ident-'b'-id:2
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_CALL_IDENT ident-'c'-id:3 byte_arg:0
 [  0] CBC_JUMP_FORWARD
 [  1] CBC_PUSH_IDENT ident-'d'-id:4
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_CALL_IDENT ident-'e'-id:5 byte_arg:0
 [  0] CBC_JUMP_FORWARD
 [  0] CBC_CALL_IDENT ident-'f'-id:6 byte_arg:0
 [  1] CBC_PUSH_IDENT ident-'next_statement'-id:0
 [  0] CBC_POP
 [  1] CBC_PUSH_IDENT ident-'a'-id:1
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  1] CBC_PUSH_IDENT ident-'b'-id:2
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  1] CBC_PUSH_IDENT ident-'c'-id:3
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_CALL_IDENT ident-'d'-id:4 byte_arg:0
 [  0] CBC_JUMP_FORWARD
 [  0] CBC_CALL_IDENT ident-'e'-id:5 byte_arg:0
 [  0] CBC_JUMP_FORWARD
 [  1] CBC_PUSH_IDENT ident-'f'-id:6
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_CALL_IDENT ident-'g'-id:7 byte_arg:0
 [  0] CBC_JUMP_FORWARD
 [  0] CBC_CALL_IDENT ident-'h'-id:8 byte_arg:0
 [  0] CBC_JUMP_FORWARD
 [  0] CBC_CALL_IDENT ident-'i'-id:9 byte_arg:0
 [  1] CBC_PUSH_IDENT ident-'next_statement'-id:0
 [  0] CBC_POP
 [  1] CBC_PUSH_IDENT ident-'a'-id:1
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_POST_INCR_IDENT ident-'x'-id:10
 [  1] CBC_PUSH_IDENT ident-'a'-id:1
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_POST_INCR_IDENT ident-'x'-id:10
 [  1] CBC_PUSH_IDENT ident-'next_statement'-id:0
 [  0] CBC_POP
 [  1] CBC_PUSH_IDENT ident-'a'-id:1
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_JUMP_FORWARD
 [  0] CBC_POST_INCR_IDENT ident-'y'-id:11
 [  1] CBC_PUSH_IDENT ident-'a'-id:1
 [  0] CBC_BRANCH_IF_FALSE_FORWARD
 [  0] CBC_JUMP_FORWARD
 [  0] CBC_POST_INCR_IDENT ident-'y'-id:11
 [  1] CBC_PUSH_IDENT ident-'next_statement'-id:0
 [  0] CBC_POP

Final byte code:
  Maximum stack depth: 1
  Literal encoding: byte
  Number of var literals: 0
  Number of identifiers: 12
  Number of other literals: 0

   0 : CBC_PUSH_IDENT ident-'next_statement'-id:0
   2 : CBC_POP
   3 : CBC_PUSH_IDENT ident-'a'-id:1
   5 : CBC_BRANCH_IF_FALSE_FORWARD offset:13(->18)
   7 : CBC_PUSH_IDENT ident-'b'-id:2
   9 : CBC_BRANCH_IF_FALSE_FORWARD offset:9(->18)
  11 : CBC_PUSH_IDENT ident-'c'-id:3
  13 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->18)
  15 : CBC_CALL_IDENT byte_arg:0 ident-'d'-id:4
  18 : CBC_PUSH_IDENT ident-'next_statement'-id:0
  20 : CBC_POP
  21 : CBC_PUSH_IDENT ident-'a'-id:1
  23 : CBC_BRANCH_IF_FALSE_FORWARD offset:4(->27)
  25 : CBC_JUMP_FORWARD offset:23(->48)
  27 : CBC_PUSH_IDENT ident-'b'-id:2
  29 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->36)
  31 : CBC_CALL_IDENT byte_arg:0 ident-'c'-id:3
  34 : CBC_JUMP_FORWARD offset:14(->48)
  36 : CBC_PUSH_IDENT ident-'d'-id:4
  38 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->45)
  40 : CBC_CALL_IDENT byte_arg:0 ident-'e'-id:5
  43 : CBC_JUMP_FORWARD offset:5(->48)
  45 : CBC_CALL_IDENT byte_arg:0 ident-'f'-id:6
  48 : CBC_PUSH_IDENT ident-'next_statement'-id:0
  50 : CBC_POP
  51 : CBC_PUSH_IDENT ident-'a'-id:1
  53 : CBC_BRANCH_IF_FALSE_FORWARD offset:34(->87)
  55 : CBC_PUSH_IDENT ident-'b'-id:2
  57 : CBC_BRANCH_IF_FALSE_FORWARD offset:16(->73)
  59 : CBC_PUSH_IDENT ident-'c'-id:3
  61 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->68)
  63 : CBC_CALL_IDENT byte_arg:0 ident-'d'-id:4
  66 : CBC_JUMP_FORWARD offset:5(->71)
  68 : CBC_CALL_IDENT byte_arg:0 ident-'e'-id:5
  71 : CBC_JUMP_FORWARD offset:14(->85)
  73 : CBC_PUSH_IDENT ident-'f'-id:6
  75 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->82)
  77 : CBC_CALL_IDENT byte_arg:0 ident-'g'-id:7
  80 : CBC_JUMP_FORWARD offset:5(->85)
  82 : CBC_CALL_IDENT byte_arg:0 ident-'h'-id:8
  85 : CBC_JUMP_FORWARD offset:5(->90)
  87 : CBC_CALL_IDENT byte_arg:0 ident-'i'-id:9
  90 : CBC_PUSH_IDENT ident-'next_statement'-id:0
  92 : CBC_POP
  93 : CBC_PUSH_IDENT ident-'a'-id:1
  95 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->97)
  97 : CBC_POST_INCR_IDENT ident-'x'-id:10
  99 : CBC_PUSH_IDENT ident-'a'-id:1
 101 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->103)
 103 : CBC_POST_INCR_IDENT ident-'x'-id:10
 105 : CBC_PUSH_IDENT ident-'next_statement'-id:0
 107 : CBC_POP
 108 : CBC_PUSH_IDENT ident-'a'-id:1
 110 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->112)
 112 : CBC_POST_INCR_IDENT ident-'y'-id:11
 114 : CBC_PUSH_IDENT ident-'a'-id:1
 116 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->118)
 118 : CBC_POST_INCR_IDENT ident-'y'-id:11
 120 : CBC_PUSH_IDENT ident-'next_statement'-id:0
 122 : CBC_POP
 123 : CBC_RETURN_WITH_UNDEFINED

Parse successfully completed. Total byte code size: 124 bytes
