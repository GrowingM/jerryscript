
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_MULTIPLY_TWO_LITERALS idx:1->ident(a) idx:2->ident(b)
  [  1] CBC_SUBTRACT_RIGHT_LITERAL idx:3->ident(c)
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:4->ident(x)
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:4->ident(x)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  1] CBC_CALL0_PUSH_RESULT
  [  4] CBC_PUSH_THREE_LITERALS idx:1->ident(a) idx:2->ident(b) idx:3->ident(c)
  [  3] CBC_MULTIPLY
  [  2] CBC_ADD
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:3->ident(c)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  3] CBC_PUSH_TWO_LITERALS idx:6->ident(d) idx:6->ident(d)
  [  3] CBC_CALL0_PUSH_RESULT
  [  2] CBC_ADD
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  1] CBC_CALL0_PUSH_RESULT
  [  2] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:8->ident(n) idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:1->ident(a)
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:3->ident(c)
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:2->ident(b)
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:5->ident(y) idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:3->ident(c)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:3->ident(c)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:8->ident(n)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_FALSE
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_NULL
  [  2] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_TWO_LITERALS idx:3->ident(c) idx:8->ident(n)
  [  2] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_TRUE
  [  3] CBC_JUMP_FORWARD
  [  3] CBC_PUSH_FALSE
  [  2] CBC_PUSH_PROP
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_FALSE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TRUE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_LITERAL idx:6->ident(d)
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_LITERAL idx:9->ident(e)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:10->ident(f)
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 4
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 11
  Const literal range end: 11
  Literal range end: 11

   0 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_MULTIPLY_TWO_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(b)
   6 : CBC_SUBTRACT_RIGHT_LITERAL idx:3(ident)->ident(c)
   8 : CBC_POP
   9 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  11 : CBC_POP_BLOCK
  12 : CBC_PUSH_LITERAL idx:4(ident)->ident(x)
  14 : CBC_POP
  15 : CBC_PUSH_LITERAL idx:4(ident)->ident(x)
  17 : CBC_CALL0_BLOCK
  18 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  20 : CBC_POP_BLOCK
  21 : CBC_PUSH_LITERAL idx:5(ident)->ident(y)
  23 : CBC_CALL0_PUSH_RESULT
  24 : CBC_PUSH_THREE_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(b) idx:3(ident)->ident(c)
  28 : CBC_MULTIPLY
  29 : CBC_ADD
  30 : CBC_BRANCH_IF_STRICT_EQUAL offset:20(->50)
  32 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
  34 : CBC_BRANCH_IF_STRICT_EQUAL offset:76(->110)
  36 : CBC_PUSH_LITERAL idx:3(ident)->ident(c)
  38 : CBC_BRANCH_IF_STRICT_EQUAL offset:72(->110)
  40 : CBC_PUSH_TWO_LITERALS idx:6(ident)->ident(d) idx:6(ident)->ident(d)
  43 : CBC_CALL0_PUSH_RESULT
  44 : CBC_ADD
  45 : CBC_STRICT_EQUAL
  46 : CBC_BRANCH_IF_TRUE_FORWARD offset:67(->113)
  48 : CBC_JUMP_FORWARD offset:65(->113)
  50 : CBC_PUSH_LITERAL idx:5(ident)->ident(y)
  52 : CBC_CALL0_BLOCK
  53 : CBC_PUSH_LITERAL idx:7(ident)->ident(z)
  55 : CBC_CALL0_PUSH_RESULT
  56 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  58 : CBC_BRANCH_IF_STRICT_EQUAL offset:12(->70)
  60 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
  62 : CBC_STRICT_EQUAL
  63 : CBC_BRANCH_IF_TRUE_FORWARD offset:12(->75)
  65 : CBC_PUSH_LITERAL idx:7(ident)->ident(z)
  67 : CBC_CALL0_BLOCK
  68 : CBC_JUMP_FORWARD offset:37(->105)
  70 : CBC_PUSH_LITERAL idx:7(ident)->ident(z)
  72 : CBC_CALL0_BLOCK
  73 : CBC_JUMP_FORWARD offset:32(->105)
  75 : CBC_PUSH_TWO_LITERALS idx:8(ident)->ident(n) idx:1(ident)->ident(a)
  78 : CBC_BRANCH_IF_STRICT_EQUAL offset:9(->87)
  80 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
  82 : CBC_STRICT_EQUAL
  83 : CBC_BRANCH_IF_TRUE_FORWARD offset:12(->95)
  85 : CBC_JUMP_FORWARD offset:6(->91)
  87 : CBC_JUMP_FORWARD offset:26(->113)
  89 : CBC_POST_INCR_IDENT_BLOCK idx:1(ident)->ident(a)
  91 : CBC_POST_INCR_IDENT_BLOCK idx:3(ident)->ident(c)
  93 : CBC_JUMP_FORWARD offset:4(->97)
  95 : CBC_POST_INCR_IDENT_BLOCK idx:2(ident)->ident(b)
  97 : CBC_PUSH_LITERAL idx:7(ident)->ident(z)
  99 : CBC_CALL0_BLOCK
 100 : CBC_JUMP_FORWARD offset:5(->105)
 102 : CBC_PUSH_LITERAL idx:7(ident)->ident(z)
 104 : CBC_CALL0_BLOCK
 105 : CBC_PUSH_LITERAL idx:5(ident)->ident(y)
 107 : CBC_CALL0_BLOCK
 108 : CBC_JUMP_FORWARD offset:5(->113)
 110 : CBC_PUSH_LITERAL idx:5(ident)->ident(y)
 112 : CBC_CALL0_BLOCK
 113 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
 115 : CBC_POP_BLOCK
 116 : CBC_JUMP_FORWARD offset:31(->147)
 118 : CBC_PUSH_TWO_LITERALS idx:5(ident)->ident(y) idx:1(ident)->ident(a)
 121 : CBC_BRANCH_IF_STRICT_EQUAL offset:15(->136)
 123 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
 125 : CBC_BRANCH_IF_STRICT_EQUAL offset:11(->136)
 127 : CBC_PUSH_LITERAL idx:3(ident)->ident(c)
 129 : CBC_BRANCH_IF_STRICT_EQUAL offset:12(->141)
 131 : CBC_PUSH_LITERAL idx:3(ident)->ident(c)
 133 : CBC_STRICT_EQUAL
 134 : CBC_BRANCH_IF_TRUE_FORWARD offset:9(->143)
 136 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
 138 : CBC_CALL0_BLOCK
 139 : CBC_JUMP_FORWARD offset:8(->147)
 141 : CBC_JUMP_FORWARD offset:6(->147)
 143 : CBC_JUMP_FORWARD offset:4(->147)
 145 : CBC_JUMP_FORWARD offset:6(->151)
 147 : CBC_PUSH_LITERAL idx:8(ident)->ident(n)
 149 : CBC_BRANCH_IF_TRUE_BACKWARD offset:31(->118)
 151 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
 153 : CBC_POP_BLOCK
 154 : CBC_PUSH_FALSE
 155 : CBC_POP
 156 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
 158 : CBC_POP_BLOCK
 159 : CBC_PUSH_NULL
 160 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
 162 : CBC_BRANCH_IF_FALSE_FORWARD offset:28(->190)
 164 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
 166 : CBC_BRANCH_IF_FALSE_FORWARD offset:20(->186)
 168 : CBC_PUSH_TWO_LITERALS idx:3(ident)->ident(c) idx:8(ident)->ident(n)
 171 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->176)
 173 : CBC_PUSH_TRUE
 174 : CBC_JUMP_FORWARD offset:3(->177)
 176 : CBC_PUSH_FALSE
 177 : CBC_PUSH_PROP
 178 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->183)
 180 : CBC_PUSH_FALSE
 181 : CBC_JUMP_FORWARD offset:3(->184)
 183 : CBC_PUSH_TRUE
 184 : CBC_JUMP_FORWARD offset:4(->188)
 186 : CBC_PUSH_LITERAL idx:6(ident)->ident(d)
 188 : CBC_JUMP_FORWARD offset:4(->192)
 190 : CBC_PUSH_LITERAL idx:9(ident)->ident(e)
 192 : CBC_STRICT_EQUAL
 193 : CBC_BRANCH_IF_TRUE_FORWARD offset:4(->197)
 195 : CBC_JUMP_FORWARD offset:4(->199)
 197 : CBC_POST_INCR_IDENT_BLOCK idx:10(ident)->ident(f)
 199 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
 201 : CBC_POP_BLOCK
 202 : CBC_RETURN_WITH_UNDEFINED

Byte code size: 203 bytes

Script parsing successfully completed. Total byte code size: 203 bytes

--- Script parsing end ---

